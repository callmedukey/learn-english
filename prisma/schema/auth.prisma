enum Role {
  USER
  ADMIN
  SUB_ADMIN
}

enum Gender {
  Male
  Female
  Other
}

enum CampusRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Campus {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  campusRequests CampusRequest[]
}

model CampusRequest {
  id          String              @id @default(cuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  campusId    String
  campus      Campus              @relation(fields: [campusId], references: [id], onDelete: Cascade)
  status      CampusRequestStatus @default(PENDING)
  requestedAt DateTime            @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  reviewer    User?               @relation("CampusRequestReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@unique([userId, campusId])
  @@index([status])
  @@index([campusId])
}

model User {
  id        String    @id @default(cuid())
  name      String?
  username  String?
  nickname  String?   @unique
  email     String    @unique
  gender    Gender?
  birthday  DateTime?
  birthdayChangedAt DateTime?
  password  String?
  countryId String?
  country   Country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)
  campusId  String?
  campus    Campus?   @relation(fields: [campusId], references: [id], onDelete: SetNull)

  referrer   User?   @relation("UserReferral", fields: [referrerId], references: [id], onDelete: SetNull)
  referrerId String?

  referralsMade User[] @relation("UserReferral")

  isReferred    Boolean @default(false)
  referrerCount Int     @default(0)

  // South Korea specific fields
  parentName  String?
  parentPhone String?
  studentName String?
  studentPhone String?

  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Billing key information (Korean users only)
  billingKey         String?
  billingAuthKey     String?   @db.Text // Temporary during auth flow
  billingKeyIssuedAt DateTime?
  billingMethod      String?   // "CARD" for domestic cards
  cardInfo           Json?     // Encrypted card details

  novelQuestionCompleted NovelQuestionCompleted[]
  RCQuestionCompleted    RCQuestionCompleted[]

  score   TotalScore?
  ARScore ARScore[]
  RCScore RCScore[]

  // Korean consent tracking (optional for backward compatibility)
  termsAgreed            Boolean?
  privacyAgreed          Boolean?
  ageVerified            String? // "14_or_older" or "under_14_with_consent"
  guardianPrivacyAgreed  Boolean?
  marketingAgreed        Boolean?

  // Payment and subscription relations
  payments      Payment[]
  subscriptions UserSubscription[]
  notifications Notification[]
  billingHistory BillingHistory[]

  RCQuestionFirstTry     RCQuestionFirstTry[]
  RCQuestionSecondTry    RCQuestionSecondTry[]
  NovelQuestionFirstTry  NovelQuestionFirstTry[]
  NovelQuestionSecondTry NovelQuestionSecondTry[]

  // Medal relations
  medals Medal[]
  monthlyARScores MonthlyARScore[]
  monthlyRCScores MonthlyRCScore[]
  monthlyBPAScores MonthlyBPAScore[]

  // Leaderboard relations
  goldMedals   MonthlyLeaderboard[] @relation("GoldMedals")
  silverMedals MonthlyLeaderboard[] @relation("SilverMedals")
  bronzeMedals MonthlyLeaderboard[] @relation("BronzeMedals")

  // Popup dismissals
  popupDismissals UserPopupDismissal[]

  // Campus request relations
  campusRequests CampusRequest[]
  reviewedCampusRequests CampusRequest[] @relation("CampusRequestReviewer")

  // BPA relations
  bpaLevelAssignments          BPAUserLevelAssignment[]        @relation("BPALevelAssignments")
  bpaAssignmentHistory         BPAUserLevelAssignmentHistory[] @relation("BPAAssignmentHistory")
  bpaAssignmentHistoryAsAdmin  BPAUserLevelAssignmentHistory[] @relation("BPAAssignmentHistoryAdmin")
  bpaScores                    BPAScore[]                      @relation("BPAScores")
  bpaQuestionsCompleted        BPAQuestionCompleted[]          @relation("BPAQuestionsCompleted")
  bpaQuestionFirstTries        BPAQuestionFirstTry[]           @relation("BPAQuestionFirstTries")
  bpaQuestionSecondTries       BPAQuestionSecondTry[]          @relation("BPAQuestionSecondTries")

  // Score transaction tracking
  scoreTransactions            ScoreTransaction[]              @relation("ScoreTransactions")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
