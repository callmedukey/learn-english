enum Role {
  USER
  ADMIN
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id        String    @id @default(cuid())
  name      String?
  username  String?
  nickname  String?   @unique
  email     String    @unique
  gender    Gender?
  birthday  DateTime?
  birthdayChangedAt DateTime?
  password  String?
  countryId String?
  country   Country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)

  referrer   User?   @relation("UserReferral", fields: [referrerId], references: [id], onDelete: SetNull)
  referrerId String?

  referralsMade User[] @relation("UserReferral")

  isReferred    Boolean @default(false)
  referrerCount Int     @default(0)

  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  novelQuestionCompleted NovelQuestionCompleted[]
  RCQuestionCompleted    RCQuestionCompleted[]

  score   TotalScore?
  ARScore ARScore[]
  RCScore RCScore[]

  // Payment and subscription relations
  payments      Payment[]
  subscriptions UserSubscription[]
  notifications Notification[]

  RCQuestionFirstTry     RCQuestionFirstTry[]
  RCQuestionSecondTry    RCQuestionSecondTry[]
  NovelQuestionFirstTry  NovelQuestionFirstTry[]
  NovelQuestionSecondTry NovelQuestionSecondTry[]

  // Medal relations
  medals Medal[]
  monthlyARScores MonthlyARScore[]
  monthlyRCScores MonthlyRCScore[]
  
  // Leaderboard relations
  goldMedals   MonthlyLeaderboard[] @relation("GoldMedals")
  silverMedals MonthlyLeaderboard[] @relation("SilverMedals")
  bronzeMedals MonthlyLeaderboard[] @relation("BronzeMedals")

  // Level lock relations
  levelLocks UserLevelLock[]
  levelChangeRequests LevelChangeRequest[]
  reviewedChangeRequests LevelChangeRequest[] @relation("ReviewedRequests")
  
  // Popup dismissals
  popupDismissals UserPopupDismissal[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
