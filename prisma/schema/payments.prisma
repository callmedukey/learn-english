enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
  WAIVED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentType {
  ONE_TIME
  RECURRING
  INITIAL_SUBSCRIPTION
}

enum RecurringStatus {
  ACTIVE
  PAUSED
  CANCELLED
  INACTIVE
  PENDING_PAYMENT
}

// Subscription plans with flexible pricing and duration
model Plan {
  id          String  @id @default(cuid())
  name        String // "1 Month Plan", "3 Month Plan", "Custom Plan", etc.
  price       Int // Price in KRW (e.g., 9900 for 9,900Ïõê)
  priceUSD    Float? // Price in USD for international users
  duration    Int // Duration in days (30, 90, 365, or any custom value)
  description String?
  isActive    Boolean @default(true)

  // Display order for sorting plans
  sortOrder Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments      Payment[]
  subscriptions UserSubscription[]

  @@index([isActive, sortOrder])
}

// Payment records from Toss-Payment
model Payment {
  id     String @id @default(cuid())
  userId String
  planId String

  // Coupon information (optional)
  couponId       String? // Reference to the coupon used
  couponCode     String? // Store the coupon code used
  discountAmount Int? // Amount discounted in KRW
  originalAmount Int? // Original amount before discount

  // Toss-Payment specific fields
  paymentKey String        @unique // From Toss-Payment response
  orderId    String        @unique // Generated order ID
  orderName  String // Description of the order
  amount     Int // Final payment amount in KRW (after discount)
  currency   String        @default("KRW")
  method     String?
  status     PaymentStatus @default(PENDING)

  // Payment type and recurring info
  paymentType      PaymentType @default(ONE_TIME)
  billingKey       String?     // For recurring payments (Korean users only)
  isInternational  Boolean     @default(false)
  recurringCycle   Int?        // Days between payments (Korean users only)

  // Customer information
  customerEmail       String?
  customerName        String?
  customerMobilePhone String?

  // Payment timestamps
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?
  cancelledAt DateTime?
  refundedAt  DateTime?

  // Toss-Payment response data (JSON)
  tossResponse  Json? // Store the full Toss-Payment response
  failureCode   String? // Error code if payment failed
  failureReason String? // Error message if payment failed

  // Relations
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan   Plan            @relation(fields: [planId], references: [id])
  coupon DiscountCoupon? @relation(fields: [couponId], references: [id], onDelete: SetNull)

  // Subscription created from this payment
  subscription UserSubscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@index([couponId])
}

// User subscription status
model UserSubscription {
  id        String @id @default(cuid())
  userId    String
  planId    String
  paymentId String @unique // Link to the payment that created this subscription

  status    SubscriptionStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime

  // Auto-renewal settings
  autoRenew Boolean @default(false)

  // Billing key reference
  billingKey        String?
  
  // Recurring payment info
  recurringStatus   RecurringStatus @default(INACTIVE)
  lastBillingDate   DateTime?
  nextBillingDate   DateTime?
  failedAttempts    Int @default(0)
  lastFailureReason String?
  lastFailureDate   DateTime?
  
  // Grace period handling
  gracePeriodEnd    DateTime?

  // Cancellation
  cancelledAt  DateTime?
  cancelReason String?

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan    Plan    @relation(fields: [planId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])
  billingHistory BillingHistory[]
  couponApplications CouponApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, paymentId]) // One subscription per payment
  @@index([userId])
  @@index([status])
  @@index([endDate])
}

// Payment webhook logs for debugging
model PaymentWebhook {
  id         String   @id @default(cuid())
  eventType  String // "PAYMENT_CONFIRMED", "PAYMENT_CANCELLED", etc.
  paymentKey String?
  orderId    String?
  data       Json // Full webhook payload
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([paymentKey])
  @@index([orderId])
  @@index([processed])
}

// New model for billing history
model BillingHistory {
  id               String   @id @default(cuid())
  userId           String
  subscriptionId   String
  billingKey       String
  amount           Int
  status           String
  attemptNumber    Int      @default(1)
  errorCode        String?
  errorMessage     String?
  processedAt      DateTime @default(now())
  
  user         User             @relation(fields: [userId], references: [id])
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([userId])
  @@index([subscriptionId])
  @@index([processedAt])
}
