model AR {
  id String @id @default(uuid())

  level       String
  score       String
  stars       Int
  description String?
  relevantGrade String?

  novels Novel[]

  ARScore ARScore[]
  monthlyARScores MonthlyARScore[]

  ARSettings ARSettings?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Novel {
  id          String  @id @default(uuid())
  title       String
  description String?

  hidden Boolean @default(false)
  comingSoon Boolean @default(false)
  locked Boolean @default(false)

  AR   AR?     @relation(fields: [ARId], references: [id], onDelete: Cascade)
  ARId String?

  novelChapters NovelChapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NovelChapter {
  id String @id @default(uuid())

  novelId String
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)

  isFree Boolean @default(false)

  orderNumber Int
  title       String
  description String?

  novelQuestionSet   NovelQuestionSet?
  novelQuestionSetId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NovelQuestionSet {
  id String @id @default(uuid())

  instructions String

  novelChapterId String?       @unique
  novelChapter   NovelChapter? @relation(fields: [novelChapterId], references: [id], onDelete: Cascade)

  novelQuestions NovelQuestion[]

  active Boolean @default(false)

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  NovelQuestionFirstTry  NovelQuestionFirstTry[]
  NovelQuestionSecondTry NovelQuestionSecondTry[]
}

model NovelQuestion {
  id String @id @default(uuid())

  novelQuestionSetId String
  novelQuestionSet   NovelQuestionSet @relation(fields: [novelQuestionSetId], references: [id], onDelete: Cascade)

  novelQuestionCompleted NovelQuestionCompleted[]

  orderNumber Int

  question    String
  choices     String[]
  answer      String
  explanation String

  score     Int
  timeLimit Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NovelQuestionCompleted {
  id String @id @default(uuid())

  novelQuestionId String
  novelQuestion   NovelQuestion @relation(fields: [novelQuestionId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  ARScore   ARScore? @relation(fields: [ARScoreId], references: [id], onDelete: Cascade)
  ARScoreId String?

  score Int

  // Answer tracking fields
  selectedAnswer String?
  isCorrect      Boolean @default(false)
  isRetry        Boolean @default(false)
  isTimedOut     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NovelQuestionFirstTry {
  id String @id @default(uuid())

  novelQuestionSetId String
  novelQuestionSet   NovelQuestionSet @relation(fields: [novelQuestionSetId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  totalQuestions Int @default(0)
  correctAnswers Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NovelQuestionSecondTry {
  id String @id @default(uuid())

  novelQuestionSetId String
  novelQuestionSet   NovelQuestionSet @relation(fields: [novelQuestionSetId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  totalQuestions Int @default(0)
  correctAnswers Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
